import { Injectable } from '@angular/core';

import * as Spline from 'cubic-spline';

import Bci from 'bcijs/browser.js';

import { environment } from 'projects/aggregator-ui/src/environments/environment';

import { HrvFreqDomain } from '../../interfaces/ecg-data';


const VLF_BAND = [0.0, 0.04]
const LF_BAND = [0.04, 0.15]
const HF_BAND = [0.15, 0.4]

@Injectable({
  providedIn: 'root'
})
export class HrvFrequencyDomainService {

  testRR = [821, 816, 834, 829, 788, 859, 876, 950, 932, 825, 878, 901, 904, 878, 892, 902, 922, 862, 872, 910, 916, 852, 866, 899, 927, 865, 922, 926, 927, 858, 894, 868, 911, 820, 841, 829, 876, 871, 868, 917, 924, 942, 860, 866, 840, 846, 795, 818, 830, 843, 824, 764, 809, 807, 791, 779, 786, 786, 802, 769, 829, 800, 832, 783, 888, 947, 985, 878, 861, 886, 958, 877, 824, 836, 838, 816, 805, 793, 804, 816, 815, 780, 814, 793, 808, 741, 743, 770, 759, 785, 823, 832, 899, 960, 971, 874, 881, 832, 827, 784];
  testRR2 = [821, 817.6926821464925, 815.4798029882874, 815.4558012206874, 818.5529727208994, 824.1201008123948, 830.6113519243949, 836.4542493289729, 839.5946195912265, 837.4322912425816, 827.3409364928776, 809.6124696856773, 792.8145499860711, 786.9717736095647, 800.1674116643575, 826.1371293874614, 852.1859525979354, 866.5750372606194, 869.8462870123399, 870.8686758562247, 878.6438873864537, 897.5274250851874, 921.8506024340269, 944.6398702200039, 959.2943420105734, 962.9546261510772, 954.9214207879958, 934.5215676323558, 902.4441110318699, 866.5684759410373, 837.1378943598066, 824.3765206969856, 832.8166276830752, 853.5555579151666, 875.7530645189381, 890.1978124318834, 897.0454744003989, 899.7933788449302, 901.8975431634743, 904.661395711515, 906.3456580596089, 904.9808759027283, 899.0000538086254, 890.1801460747558, 881.95476379761, 877.7658958549963, 879.4431262698636, 884.6470739109267, 890.3735354744834, 893.8541573930747, 895.3915252417097, 897.4378871525495, 902.4893073090092, 911.4983843564928, 920.378394448567, 924.0158286829959, 917.4870893021695, 901.180986550629, 881.3833159898146, 864.6870993716536, 856.9538319411093, 858.1246590253759, 865.2718632252659, 875.4615496208371, 886.5735246219486, 897.7807106822232, 908.371077248471, 917.4577301276896, 923.0009834867417, 922.4944345403173, 913.4413381388102, 895.7952810220603, 875.038564129433, 857.4112164277183, 848.8940095533145, 850.3135785342093, 857.7553280523798, 867.1299722524957, 875.6853448385946, 884.374135770065, 894.7854235488533, 908.1618116898476, 921.61910383635, 929.5628626519806, 926.3519755400015, 909.5215793639345, 887.10072023871, 869.2826347978034, 866.1085234171288, 879.8258559338364, 901.3094179270024, 920.5339695490667, 929.3233811433442, 929.6258754290709, 926.8370722427717, 926.33892036927, 930.3351716054872, 934.0955884912719, 931.9755771695051, 918.6493359984994, 895.9873806662315, 872.9818422651884, 858.928703208287, 861.4211863862731, 875.3051623477611, 889.6487307711016, 893.6621944308928, 884.8630650471005, 872.6362672181004, 867.2781490734502, 877.1664298606046, 895.9395765403241, 910.4044596215211, 907.4730324053866, 883.7759312419486, 851.7233700495924, 825.170173875246, 816.6865533278138, 824.194457186753, 836.299111147727, 841.6559709659921, 837.0600012765165, 830.1047670785018, 829.128560066475, 839.6191766071615, 856.5802875297319, 872.6057975757909, 880.927555476233, 881.0942091446541, 876.2620316108038, 869.6280924475021, 864.1162813810453, 862.0544816194857, 865.6919834639099, 876.812178916297, 892.7715235670489, 908.4792040336488, 918.8445459972277, 921.8554232182855, 921.4459680860504, 922.228952986531, 928.4433478796603, 938.3645299563871, 945.4799542797005, 943.1419671345009, 926.519388255747, 900.9732094195839, 875.4168557689662, 858.7625254545172, 855.9811563316388, 860.9959244384522, 865.8088128253703, 863.1584541447227, 853.9455526405275, 844.1520904642666, 839.8145997392661, 843.0942600727601, 847.8838124372083, 847.013553866945, 834.9612908613774, 816.4082658168377, 799.9369928479024, 793.8706779509583, 799.4979656425828, 810.5397536573539, 820.380842397752, 825.5349697615917, 827.9355109659101, 830.0556464040678, 833.6997730795366, 838.1528713012691, 842.1067553281979, 844.1894769818527, 842.3708292183393, 834.2322675834631, 817.4210615910283, 794.0023549671515, 772.9873150139969, 763.9961435729572, 772.8374381359365, 791.4674413548694, 808.6964837507337, 815.7519362730633, 814.2513617296695, 808.6036579566587, 802.8735258217685, 798.0274748821312, 793.3924417763402, 788.3302334244698, 783.2860274894844, 779.75498213071, 779.2466663369353, 781.7168421766874, 784.80521500924, 785.9753067829533, 784.5317639030279, 783.5368424351634, 786.5098329613653, 794.6967677747792, 802.3469916189115, 802.3681141499061, 790.3751819276843, 774.7980488057078, 767.8542633611413, 779.9008315971834, 804.31685226844, 825.3978640553034, 828.7671950440331, 816.8862659201288, 803.2747725465044, 801.4553625614802, 814.3619749921268, 828.9763922698054, 830.976383638958, 813.8924779269843, 791.7934117061984, 782.0641467888456, 799.0696486377185, 835.9671922202452, 876.827028260398, 906.8902284758459, 924.5650261262406, 936.3693436644338, 948.9347637108314, 965.6333228298478, 981.0121963087452, 988.1396547414384, 980.1899258507641, 956.2324714814064, 924.218072374688, 892.8323045762337, 870.6160851950474, 860.617376256955, 858.8232793583506, 860.7564450422584, 862.899137176099, 867.052416998888, 876.8496990801517, 895.7342525960228, 921.4388995544766, 945.1556885490759, 957.7177942723517, 951.96993108403, 931.5048675622193, 903.4904540792802, 875.0965206073445, 852.077352173978, 835.6199480509831, 825.9918961108909, 823.3662018600722, 826.2773061081808, 831.8733102796696, 837.266965231365, 840.4214423340983, 840.872154965316, 838.32454774662, 832.760754068866, 825.5541429680108, 818.5143981985307, 813.3506554526796, 810.0845627448319, 807.3396407654691, 803.7131963018508, 798.9620400763666, 794.76650949938, 792.9877051250022, 794.7380654503063, 798.8257793765154, 803.6171563424846, 807.7570874443487, 811.3256230283575, 814.8636477973824, 818.7111680938107, 821.132181504003, 819.1659518409975, 809.9845118403925, 795.4745654457831, 783.095257144917, 780.610990557524, 790.9601450966867, 805.5602243665853, 814.1465790007513, 810.2514417942815, 800.2529364511306, 793.2431907419445, 796.6515783475209, 805.6186810033691, 809.7772075223755, 799.5936842786155, 777.0743737941283, 752.4763134616884, 736.0859328943244, 732.2454001587885, 737.4933478680316, 747.8389591405916, 759.3036458420788, 767.9234256215216, 769.8875688924592, 765.6483239963633, 760.3900152442276, 759.4755827796122, 765.286649929588, 776.1223472266172, 789.9803728333158, 804.5005180090401, 816.7833782361078, 823.8969331525931, 825.3270558599128, 825.8941577433735, 831.1312245029698, 845.3244167136819, 866.2581302497431, 889.6043055708308, 911.2038174579405, 929.6105661701575, 945.5566279794938, 959.8355443805993, 972.5131638708426, 980.637857044601, 980.4759778403106, 968.3005578392191, 943.47499673538, 913.353018078056, 886.5625571854299, 871.6766477906896, 871.4621353677252, 877.833630701732, 881.5161292673206, 874.4727582883311, 858.8194398061817, 841.646683574376, 830.048098073811, 827.1289459598804, 828.1196756663802, 827.3277234178568, 820.0977002227387, 807.1173936632833];

  private nnIntervals: NnValueType[] = [];

  constructor() { }

  /**
   * Gets the hrv frequency values
   */
  getFrequencyDomain(nnIntervals: NnValueType[]): HrvFreqDomain {
    this.nnIntervals = nnIntervals;

    return this.calculateFrequencyDomain();
  }


  /**
   * Samples (and normalizes) a spine of the nnIntervals.
   * It will contain a list of the approximate values of the heart rate measured according to the samplingFrequency.
   * @returns     Interpolated List og values as
   */
  getInterpolatedNormalizedNnIntervals(): number[] {
    const interpolatedTimes = this.getInterpolatedTimestampList();
    const spline = this.getRythmtogramSpline();
    const interpolatedValues: number[] = [];

    // Calculate the values of the spline at each sampling point (not necessarily a original rrInterval)
    interpolatedTimes.forEach(time => {
      interpolatedValues.push(spline.at(time));
    });

    // Calculate the average of the samples
    const sum = interpolatedValues.reduce((acc, curr) => acc + curr, 0);
    const avg = (sum / interpolatedTimes.length) || 0;

    // Normalize the sample by subtracting the average
    for (let i = 0; i < interpolatedValues.length; i++) {
      interpolatedValues[i] -= avg;
    }

    return interpolatedValues;
  }


  /**
   * Creates a spine of the current heart rate measurement.
   *
   * @returns     a spine of for the heart rate measurement
   */
  private getRythmtogramSpline(): Spline {
    const rrValues: number[] = [];
    const rrTimes: number[] = [];
    const normalizingTime = this.nnIntervals.length > 0 ? this.nnIntervals[0].time : 0;
    this.nnIntervals.forEach(nnValue => {
      rrValues.push(nnValue.value);
      rrTimes.push(nnValue.time - normalizingTime);
    });

    return new Spline(rrTimes, rrValues);
  }


  /**
   * Creates a list of timestamps according to the sampling frequency.
   *
   * @returns      list of timestamps
   */
  getInterpolatedTimestampList(): number[] {
    const timestamps = [];
    if (this.nnIntervals[0]) {
      const intervalSize = 1000 / environment.hrv.samplingFrequency; // Factor 1000 since Hz is 1 / s but rrIntervals are measured in ms
      const duration = this.nnIntervals[this.nnIntervals.length - 1].time - this.nnIntervals[0].time;
      const numIntervals = Math.floor(duration / intervalSize);

      for (let i = 0; i < numIntervals; i++) {
        timestamps.push(i * intervalSize);
      }
    }

    return timestamps;
  }


  /**
   * Calculate the frequency domain values
   *
   * @returns     Frequency domain object
   */
  calculateFrequencyDomain(): HrvFreqDomain {
    // use interpolation to sample the signal with a constant, and higher frequency
    const samples = this.getInterpolatedNormalizedNnIntervals();
    // calculate the bandpower of each HRV-band using a FFT
    const bands = Bci.bandpower(samples, environment.hrv.samplingFrequency, [VLF_BAND, LF_BAND, HF_BAND]);

    // Get the results of the band nd calculate hrv measurement values
    const vlf = bands[0];
    const lf = bands[1];
    const hf = bands[2];
    const lfHfRatio = lf / hf;

    // Create and return HrvFreqDomain value
    const data: HrvFreqDomain = {
      vlf: vlf,
      lf: lf,
      hf: hf,
      lfHfRatio: lfHfRatio
    };
    return data;
  }
}

// A Small interface to help calculating hrv values
interface NnValueType {
  // Value of a NN measurement
  value: number;
  // Time of the NN measurement
  time: number;
}
