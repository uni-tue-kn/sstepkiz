(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@manekinekko/angular-web-bluetooth', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = global || self, factory((global.manekinekko = global.manekinekko || {}, global.manekinekko['angular-web-bluetooth'] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, core, rxjs, operators, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/platform/browser.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BrowserWebBluetooth = /** @class */ (function () {
        function BrowserWebBluetooth() {
            this.ble = navigator.bluetooth;
            if (!this.ble) {
                throw new Error('Your browser does not support Smart Bluetooth. See http://caniuse.com/#search=Bluetooth for more details.');
            }
        }
        /**
         * @param {?} options
         * @return {?}
         */
        BrowserWebBluetooth.prototype.requestDevice = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return this.ble.requestDevice(options);
        };
        BrowserWebBluetooth.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BrowserWebBluetooth.ctorParameters = function () { return []; };
        return BrowserWebBluetooth;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        BrowserWebBluetooth.prototype.ble;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/platform/server.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ServerWebBluetooth = /** @class */ (function () {
        function ServerWebBluetooth() {
        }
        /**
         * @return {?}
         */
        ServerWebBluetooth.instance = /**
         * @return {?}
         */
        function () {
            // mocked object for now
            return {};
        };
        ServerWebBluetooth.decorators = [
            { type: core.Injectable }
        ];
        return ServerWebBluetooth;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/logger.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Logger() { }
    if (false) {
        /**
         * @param {?} args
         * @return {?}
         */
        Logger.prototype.log = function (args) { };
        /**
         * @param {?} args
         * @return {?}
         */
        Logger.prototype.error = function (args) { };
        /**
         * @param {?} args
         * @return {?}
         */
        Logger.prototype.warn = function (args) { };
    }
    var ConsoleLoggerService = /** @class */ (function () {
        function ConsoleLoggerService() {
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        ConsoleLoggerService.prototype.log = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.log.apply(console, args);
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        ConsoleLoggerService.prototype.error = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.error.apply(console, args);
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        ConsoleLoggerService.prototype.warn = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.warn.apply(console, args);
        };
        ConsoleLoggerService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ ConsoleLoggerService.ɵprov = core.ɵɵdefineInjectable({ factory: function ConsoleLoggerService_Factory() { return new ConsoleLoggerService(); }, token: ConsoleLoggerService, providedIn: "root" });
        return ConsoleLoggerService;
    }());
    var NoLoggerService = /** @class */ (function () {
        function NoLoggerService() {
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        NoLoggerService.prototype.log = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        NoLoggerService.prototype.error = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        NoLoggerService.prototype.warn = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        NoLoggerService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ NoLoggerService.ɵprov = core.ɵɵdefineInjectable({ factory: function NoLoggerService_Factory() { return new NoLoggerService(); }, token: NoLoggerService, providedIn: "root" });
        return NoLoggerService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/bluetooth.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BluetoothCore = /** @class */ (function () {
        function BluetoothCore(webBle, console) {
            this.webBle = webBle;
            this.console = console;
            this.device$ = new core.EventEmitter();
            this.gatt$ = new core.EventEmitter();
            this.characteristicValueChanges$ = new core.EventEmitter();
            this.gattServer = null;
        }
        /**
         * @return {?}
         */
        BluetoothCore.prototype.getDevice$ = /**
         * @return {?}
         */
        function () {
            return this.device$;
        };
        /**
         * @return {?}
         */
        BluetoothCore.prototype.getGATT$ = /**
         * @return {?}
         */
        function () {
            return this.gatt$;
        };
        /**
         * @return {?}
         */
        BluetoothCore.prototype.streamValues$ = /**
         * @return {?}
         */
        function () {
            return this.characteristicValueChanges$.pipe(operators.filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value && value.byteLength > 0; })));
        };
        /**
         * Run the discovery process and read the value form the provided service and characteristic
         * @param options the ReadValueOptions
         */
        /**
         * Run the discovery process and read the value form the provided service and characteristic
         * @param {?} options the ReadValueOptions
         * @return {?}
         */
        BluetoothCore.prototype.value = /**
         * Run the discovery process and read the value form the provided service and characteristic
         * @param {?} options the ReadValueOptions
         * @return {?}
         */
        function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var device, gatt, primaryService, characteristic, value, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.console.log('[BLE::Info] Reading value with options %o', options);
                            if (typeof options.acceptAllDevices === 'undefined') {
                                options.acceptAllDevices = true;
                            }
                            if (typeof options.optionalServices === 'undefined') {
                                options.optionalServices = [options.service];
                            }
                            else {
                                options.optionalServices = __spread(options.optionalServices);
                            }
                            this.console.log('[BLE::Info] Reading value with options %o', options);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 7, , 8]);
                            return [4 /*yield*/, this.discover({
                                    acceptAllDevices: options.acceptAllDevices,
                                    optionalServices: options.optionalServices
                                })];
                        case 2:
                            device = (/** @type {?} */ (_a.sent()));
                            this.console.log('[BLE::Info] Device info %o', device);
                            return [4 /*yield*/, this.connectDevice(device)];
                        case 3:
                            gatt = _a.sent();
                            this.console.log('[BLE::Info] GATT info %o', gatt);
                            return [4 /*yield*/, this.getPrimaryService(gatt, options.service)];
                        case 4:
                            primaryService = (/** @type {?} */ (_a.sent()));
                            this.console.log('[BLE::Info] Primary Service info %o', primaryService);
                            return [4 /*yield*/, this.getCharacteristic(primaryService, options.characteristic)];
                        case 5:
                            characteristic = (/** @type {?} */ (_a.sent()));
                            this.console.log('[BLE::Info] Characteristic info %o', characteristic);
                            return [4 /*yield*/, characteristic.readValue()];
                        case 6:
                            value = _a.sent();
                            this.console.log('[BLE::Info] Value info %o', value);
                            return [2 /*return*/, value];
                        case 7:
                            error_1 = _a.sent();
                            throw new Error(error_1);
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @param {?} options
         * @return {?}
         */
        BluetoothCore.prototype.value$ = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return rxjs.from(this.value(options));
        };
        /**
         * Run the discovery process.
         *
         * @param Options such as filters and optional services
         * @return  The GATT server for the chosen device
         */
        /**
         * Run the discovery process.
         *
         * @param {?=} options
         * @return {?} The GATT server for the chosen device
         */
        BluetoothCore.prototype.discover = /**
         * Run the discovery process.
         *
         * @param {?=} options
         * @return {?} The GATT server for the chosen device
         */
        function (options) {
            if (options === void 0) { options = (/** @type {?} */ ({})); }
            return __awaiter(this, void 0, void 0, function () {
                var device, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options.optionalServices = options.optionalServices || ['generic_access'];
                            this.console.log('[BLE::Info] Requesting devices with options %o', options);
                            device = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.webBle.requestDevice(options)];
                        case 2:
                            device = _a.sent();
                            device.addEventListener('gattserverdisconnected', this.onDeviceDisconnected.bind(this));
                            if (device) {
                                this.device$.emit(device);
                            }
                            else {
                                this.device$.error("[BLE::Error] Can not get the Bluetooth Remote GATT Server. Abort.");
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _a.sent();
                            this.console.error(error_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, device];
                    }
                });
            });
        };
        /**
         * This handler will trigger when the client disconnets from the server.
         *
         * @param event The onDeviceDisconnected event
         */
        /**
         * This handler will trigger when the client disconnets from the server.
         *
         * @param {?} event The onDeviceDisconnected event
         * @return {?}
         */
        BluetoothCore.prototype.onDeviceDisconnected = /**
         * This handler will trigger when the client disconnets from the server.
         *
         * @param {?} event The onDeviceDisconnected event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var disconnectedDevice = (/** @type {?} */ (event.target));
            this.console.log('[BLE::Info] disconnected device %o', disconnectedDevice);
            this.device$.emit(null);
        };
        /**
         * Run the discovery process.
         *
         * @param Options such as filters and optional services
         * @return  Emites the value of the requested service read from the device
         */
        /**
         * Run the discovery process.
         *
         * @param {?=} options
         * @return {?} Emites the value of the requested service read from the device
         */
        BluetoothCore.prototype.discover$ = /**
         * Run the discovery process.
         *
         * @param {?=} options
         * @return {?} Emites the value of the requested service read from the device
         */
        function (options) {
            var _this = this;
            return rxjs.from(this.discover(options)).pipe(operators.mergeMap((/**
             * @param {?} device
             * @return {?}
             */
            function (device) { return _this.connectDevice$(device); })));
        };
        /**
         * Connect to current device.
         *
         * @return  Emites the gatt server instance of the requested device
         */
        /**
         * Connect to current device.
         *
         * @param {?} device
         * @return {?} Emites the gatt server instance of the requested device
         */
        BluetoothCore.prototype.connectDevice = /**
         * Connect to current device.
         *
         * @param {?} device
         * @return {?} Emites the gatt server instance of the requested device
         */
        function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var gattServer, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!device) return [3 /*break*/, 5];
                            this.console.log('[BLE::Info] Connecting to Bluetooth Remote GATT Server of %o', device);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, device.gatt.connect()];
                        case 2:
                            gattServer = _a.sent();
                            this.gattServer = gattServer;
                            this.gatt$.emit(gattServer);
                            return [2 /*return*/, gattServer];
                        case 3:
                            error_3 = _a.sent();
                            // probably the user has canceled the discovery
                            Promise.reject("" + error_3.message);
                            this.gatt$.error("" + error_3.message);
                            return [3 /*break*/, 4];
                        case 4: return [3 /*break*/, 6];
                        case 5:
                            this.console.error('[BLE::Error] Was not able to connect to Bluetooth Remote GATT Server');
                            this.gatt$.error(null);
                            _a.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Connect to current device.
         *
         * @return  Emites the gatt server instance of the requested device
         */
        /**
         * Connect to current device.
         *
         * @param {?} device
         * @return {?} Emites the gatt server instance of the requested device
         */
        BluetoothCore.prototype.connectDevice$ = /**
         * Connect to current device.
         *
         * @param {?} device
         * @return {?} Emites the gatt server instance of the requested device
         */
        function (device) {
            return rxjs.from(this.connectDevice(device));
        };
        /**
         * Disconnect the current connected device
         */
        /**
         * Disconnect the current connected device
         * @return {?}
         */
        BluetoothCore.prototype.disconnectDevice = /**
         * Disconnect the current connected device
         * @return {?}
         */
        function () {
            if (!this.gattServer) {
                return;
            }
            this.console.log('[BLE::Info] Disconnecting from Bluetooth Device %o', this.gattServer);
            if (this.gattServer.connected) {
                this.gattServer.disconnect();
            }
            else {
                this.console.log('[BLE::Info] Bluetooth device is already disconnected');
            }
        };
        /**
         * Requests the primary service.
         *
         * @param gatt The BluetoothRemoteGATTServer sever
         * @param service The UUID of the primary service
         * @return The remote service (as a Promise)
         */
        /**
         * Requests the primary service.
         *
         * @param {?} gatt The BluetoothRemoteGATTServer sever
         * @param {?} service The UUID of the primary service
         * @return {?} The remote service (as a Promise)
         */
        BluetoothCore.prototype.getPrimaryService = /**
         * Requests the primary service.
         *
         * @param {?} gatt The BluetoothRemoteGATTServer sever
         * @param {?} service The UUID of the primary service
         * @return {?} The remote service (as a Promise)
         */
        function (gatt, service) {
            return __awaiter(this, void 0, void 0, function () {
                var remoteService, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 5]);
                            return [4 /*yield*/, gatt.getPrimaryService(service)];
                        case 1:
                            remoteService = _a.sent();
                            return [4 /*yield*/, Promise.resolve(remoteService)];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3:
                            error_4 = _a.sent();
                            return [4 /*yield*/, Promise.reject(error_4.message + " (" + service + ")")];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Requests the primary service.
         *
         * @param gatt The BluetoothRemoteGATTServer sever
         * @param service The UUID of the primary service
         * @return The remote service (as an observable).
         */
        /**
         * Requests the primary service.
         *
         * @param {?} gatt The BluetoothRemoteGATTServer sever
         * @param {?} service The UUID of the primary service
         * @return {?} The remote service (as an observable).
         */
        BluetoothCore.prototype.getPrimaryService$ = /**
         * Requests the primary service.
         *
         * @param {?} gatt The BluetoothRemoteGATTServer sever
         * @param {?} service The UUID of the primary service
         * @return {?} The remote service (as an observable).
         */
        function (gatt, service) {
            this.console.log('[BLE::Info] Getting primary service "%s" (if available) of %o', service, gatt);
            if (gatt) {
                return rxjs.from(this.getPrimaryService(gatt, service));
            }
            else {
                return rxjs.throwError(new Error('[BLE::Error] Was not able to connect to the Bluetooth Remote GATT Server'));
            }
        };
        /**
         * Requests a characteristic from the primary service.
         *
         * @param primaryService The primary service.
         * @param characteristic The characteristic's UUID.
         * @returns The characteristic description (as a Promise).
         */
        /**
         * Requests a characteristic from the primary service.
         *
         * @param {?} primaryService The primary service.
         * @param {?} characteristic The characteristic's UUID.
         * @return {?} The characteristic description (as a Promise).
         */
        BluetoothCore.prototype.getCharacteristic = /**
         * Requests a characteristic from the primary service.
         *
         * @param {?} primaryService The primary service.
         * @param {?} characteristic The characteristic's UUID.
         * @return {?} The characteristic description (as a Promise).
         */
        function (primaryService, characteristic) {
            return __awaiter(this, void 0, void 0, function () {
                var char_1, rejectionError_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.console.log('[BLE::Info] Getting Characteristic "%s" of %o', characteristic, primaryService);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, primaryService.getCharacteristic(characteristic)];
                        case 2:
                            char_1 = _a.sent();
                            // listen for characteristic value changes
                            if (char_1.properties.notify) {
                                char_1.startNotifications().then((/**
                                 * @param {?} _
                                 * @return {?}
                                 */
                                function (_) {
                                    _this.console.log('[BLE::Info] Starting notifications of "%s"', characteristic);
                                    char_1.addEventListener('characteristicvaluechanged', _this.onCharacteristicChanged.bind(_this));
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                function (error) {
                                    Promise.reject(error.message + " (" + characteristic + ")");
                                }));
                            }
                            else {
                                char_1.addEventListener('characteristicvaluechanged', this.onCharacteristicChanged.bind(this));
                            }
                            return [2 /*return*/, char_1];
                        case 3:
                            rejectionError_1 = _a.sent();
                            Promise.reject(rejectionError_1.message + " (" + characteristic + ")");
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Requests a characteristic from the primary service.
         *
         * @param primaryService The primary service.
         * @param characteristic The characteristic's UUID.
         * @returns The characteristic description (as a Observable).
         */
        /**
         * Requests a characteristic from the primary service.
         *
         * @param {?} primaryService The primary service.
         * @param {?} characteristic The characteristic's UUID.
         * @return {?} The characteristic description (as a Observable).
         */
        BluetoothCore.prototype.getCharacteristic$ = /**
         * Requests a characteristic from the primary service.
         *
         * @param {?} primaryService The primary service.
         * @param {?} characteristic The characteristic's UUID.
         * @return {?} The characteristic description (as a Observable).
         */
        function (primaryService, characteristic) {
            this.console.log('[BLE::Info] Getting Characteristic "%s" of %o', characteristic, primaryService);
            return rxjs.from(this.getCharacteristic(primaryService, characteristic));
        };
        /**
         * Sets the characteristic's state.
         *
         * @param service The parent service of the characteristic.
         * @param characteristic The requested characteristic
         * @param state An ArrayBuffer containing the value of the characteristic.
         * @return The primary service (useful for chaining).
         */
        /**
         * Sets the characteristic's state.
         *
         * @param {?} service The parent service of the characteristic.
         * @param {?} characteristic The requested characteristic
         * @param {?} state An ArrayBuffer containing the value of the characteristic.
         * @return {?} The primary service (useful for chaining).
         */
        BluetoothCore.prototype.setCharacteristicState = /**
         * Sets the characteristic's state.
         *
         * @param {?} service The parent service of the characteristic.
         * @param {?} characteristic The requested characteristic
         * @param {?} state An ArrayBuffer containing the value of the characteristic.
         * @return {?} The primary service (useful for chaining).
         */
        function (service, characteristic, state) {
            var _this = this;
            /** @type {?} */
            var primaryService = this.getPrimaryService$(this.gattServer, service);
            primaryService
                // tslint:disable-next-line: variable-name
                .pipe(operators.mergeMap((/**
             * @param {?} _primaryService
             * @return {?}
             */
            function (_primaryService) { return _this.getCharacteristic$(_primaryService, characteristic); })))
                // tslint:disable-next-line: no-shadowed-variable
                .subscribe((/**
             * @param {?} characteristic
             * @return {?}
             */
            function (characteristic) { return _this.writeValue$(characteristic, state); }));
            return primaryService;
        };
        /**
         * Enables the specified characteristic of a given service.
         *
         * @param service The parent service of the characteristic.
         * @param characteristic The requested characteristic
         * @return The primary service (useful for chaining).
         */
        /**
         * Enables the specified characteristic of a given service.
         *
         * @param {?} service The parent service of the characteristic.
         * @param {?} characteristic The requested characteristic
         * @param {?=} state
         * @return {?} The primary service (useful for chaining).
         */
        BluetoothCore.prototype.enableCharacteristic = /**
         * Enables the specified characteristic of a given service.
         *
         * @param {?} service The parent service of the characteristic.
         * @param {?} characteristic The requested characteristic
         * @param {?=} state
         * @return {?} The primary service (useful for chaining).
         */
        function (service, characteristic, state) {
            state = state || new Uint8Array([1]);
            return this.setCharacteristicState(service, characteristic, state);
        };
        /**
         * Disables the specified characteristic of a given service.
         *
         * @param service The parent service of the characteristic.
         * @param characteristic The requested characteristic.
         * @return The primary service (useful for chaining).
         */
        /**
         * Disables the specified characteristic of a given service.
         *
         * @param {?} service The parent service of the characteristic.
         * @param {?} characteristic The requested characteristic.
         * @param {?=} state
         * @return {?} The primary service (useful for chaining).
         */
        BluetoothCore.prototype.disbaleCharacteristic = /**
         * Disables the specified characteristic of a given service.
         *
         * @param {?} service The parent service of the characteristic.
         * @param {?} characteristic The requested characteristic.
         * @param {?=} state
         * @return {?} The primary service (useful for chaining).
         */
        function (service, characteristic, state) {
            state = state || new Uint8Array([0]);
            return this.setCharacteristicState(service, characteristic, state);
        };
        /**
         * Dispatches new values emitted by a characteristic.
         *
         * @param event the distpatched event.
         */
        /**
         * Dispatches new values emitted by a characteristic.
         *
         * @param {?} event the distpatched event.
         * @return {?}
         */
        BluetoothCore.prototype.onCharacteristicChanged = /**
         * Dispatches new values emitted by a characteristic.
         *
         * @param {?} event the distpatched event.
         * @return {?}
         */
        function (event) {
            this.console.log('[BLE::Info] Dispatching new characteristic value %o', event);
            /** @type {?} */
            var value = ((/** @type {?} */ (event.target))).value;
            this.characteristicValueChanges$.emit(value);
        };
        /**
         * Reads a value from the characteristics, as a DataView.
         *
         * @param characteristic The requested characteristic.
         * @return the DataView value (as an Observable).
         */
        /**
         * Reads a value from the characteristics, as a DataView.
         *
         * @param {?} characteristic The requested characteristic.
         * @return {?} the DataView value (as an Observable).
         */
        BluetoothCore.prototype.readValue$ = /**
         * Reads a value from the characteristics, as a DataView.
         *
         * @param {?} characteristic The requested characteristic.
         * @return {?} the DataView value (as an Observable).
         */
        function (characteristic) {
            this.console.log('[BLE::Info] Reading Characteristic %o', characteristic);
            return rxjs.from(characteristic
                .readValue()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return Promise.resolve(data); }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return Promise.reject("" + error.message); })));
        };
        /**
         * Writes a value into the specified characteristic.
         *
         * @param characteristic The requested characteristic.
         * @param value The value to be written (as an ArrayBuffer or Uint8Array).
         * @return an void Observable.
         */
        /**
         * Writes a value into the specified characteristic.
         *
         * @param {?} characteristic The requested characteristic.
         * @param {?} value The value to be written (as an ArrayBuffer or Uint8Array).
         * @return {?} an void Observable.
         */
        BluetoothCore.prototype.writeValue$ = /**
         * Writes a value into the specified characteristic.
         *
         * @param {?} characteristic The requested characteristic.
         * @param {?} value The value to be written (as an ArrayBuffer or Uint8Array).
         * @return {?} an void Observable.
         */
        function (characteristic, value) {
            this.console.log('[BLE::Info] Writing Characteristic %o', characteristic);
            return rxjs.from(characteristic.writeValue(value).then((/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return Promise.resolve(); }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return Promise.reject("" + error.message); })));
        };
        /**
         * A stream of DataView values emitted by the specified characteristic.
         *
         * @param characteristic The characteristic which value you want to observe
         * @return The stream of DataView values.
         */
        /**
         * A stream of DataView values emitted by the specified characteristic.
         *
         * @param {?} characteristic The characteristic which value you want to observe
         * @return {?} The stream of DataView values.
         */
        BluetoothCore.prototype.observeValue$ = /**
         * A stream of DataView values emitted by the specified characteristic.
         *
         * @param {?} characteristic The characteristic which value you want to observe
         * @return {?} The stream of DataView values.
         */
        function (characteristic) {
            characteristic.startNotifications();
            /** @type {?} */
            var disconnected = rxjs.fromEvent(characteristic.service.device, 'gattserverdisconnected');
            return rxjs.fromEvent(characteristic, 'characteristicvaluechanged')
                .pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return (/** @type {?} */ (((/** @type {?} */ (event.target))).value)); })), operators.takeUntil(disconnected));
        };
        /**
         * A utility method to convert LE to an unsigned 16-bit integer values.
         *
         * @param data The DataView binary data.
         * @param byteOffset The offset, in byte, from the start of the view where to read the data.
         * @return An unsigned 16-bit integer number.
         */
        /**
         * A utility method to convert LE to an unsigned 16-bit integer values.
         *
         * @param {?} data The DataView binary data.
         * @param {?} byteOffset The offset, in byte, from the start of the view where to read the data.
         * @return {?} An unsigned 16-bit integer number.
         */
        BluetoothCore.prototype.littleEndianToUint16 = /**
         * A utility method to convert LE to an unsigned 16-bit integer values.
         *
         * @param {?} data The DataView binary data.
         * @param {?} byteOffset The offset, in byte, from the start of the view where to read the data.
         * @return {?} An unsigned 16-bit integer number.
         */
        function (data, byteOffset) {
            // tslint:disable-next-line:no-bitwise
            return (this.littleEndianToUint8(data, byteOffset + 1) << 8) + this.littleEndianToUint8(data, byteOffset);
        };
        /**
         * A utility method to convert LE to an unsigned 8-bit integer values.
         *
         * @param data The DataView binary data.
         * @param byteOffset The offset, in byte, from the start of the view where to read the data.
         * @return An unsigned 8-bit integer number.
         */
        /**
         * A utility method to convert LE to an unsigned 8-bit integer values.
         *
         * @param {?} data The DataView binary data.
         * @param {?} byteOffset The offset, in byte, from the start of the view where to read the data.
         * @return {?} An unsigned 8-bit integer number.
         */
        BluetoothCore.prototype.littleEndianToUint8 = /**
         * A utility method to convert LE to an unsigned 8-bit integer values.
         *
         * @param {?} data The DataView binary data.
         * @param {?} byteOffset The offset, in byte, from the start of the view where to read the data.
         * @return {?} An unsigned 8-bit integer number.
         */
        function (data, byteOffset) {
            return data.getUint8(byteOffset);
        };
        /**
         * Sends random data (for testing purposes only).
         *
         * @return Random unsigned 8-bit integer values.
         */
        /**
         * Sends random data (for testing purposes only).
         *
         * @param {?=} fakeValue
         * @return {?} Random unsigned 8-bit integer values.
         */
        BluetoothCore.prototype.fakeNext = /**
         * Sends random data (for testing purposes only).
         *
         * @param {?=} fakeValue
         * @return {?} Random unsigned 8-bit integer values.
         */
        function (fakeValue) {
            if (fakeValue === undefined) {
                fakeValue = (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var dv = new DataView(new ArrayBuffer(8));
                    // tslint:disable-next-line:no-bitwise
                    dv.setUint8(0, (Math.random() * 110) | 0);
                    return dv;
                });
            }
            this.characteristicValueChanges$.emit(fakeValue());
        };
        BluetoothCore.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        BluetoothCore.ctorParameters = function () { return [
            { type: BrowserWebBluetooth },
            { type: ConsoleLoggerService }
        ]; };
        /** @nocollapse */ BluetoothCore.ɵprov = core.ɵɵdefineInjectable({ factory: function BluetoothCore_Factory() { return new BluetoothCore(core.ɵɵinject(BrowserWebBluetooth), core.ɵɵinject(ConsoleLoggerService)); }, token: BluetoothCore, providedIn: "root" });
        return BluetoothCore;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        BluetoothCore.prototype.device$;
        /**
         * @type {?}
         * @private
         */
        BluetoothCore.prototype.gatt$;
        /**
         * @type {?}
         * @private
         */
        BluetoothCore.prototype.characteristicValueChanges$;
        /**
         * @type {?}
         * @private
         */
        BluetoothCore.prototype.gattServer;
        /**
         * @type {?}
         * @private
         */
        BluetoothCore.prototype.webBle;
        /**
         * @type {?}
         * @private
         */
        BluetoothCore.prototype.console;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/bluetooth.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function AWBOptions() { }
    if (false) {
        /** @type {?|undefined} */
        AWBOptions.prototype.enableTracing;
    }
    /**
     * @return {?}
     */
    function browserWebBluetooth() {
        return new BrowserWebBluetooth();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    function consoleLoggerServiceConfig(options) {
        if (options && options.enableTracing) {
            return new ConsoleLoggerService();
        }
        else {
            return new NoLoggerService();
        }
    }
    /**
     * @return {?}
     */
    function makeMeTokenInjector() {
        return new core.InjectionToken('AWBOptions');
    }
    var WebBluetoothModule = /** @class */ (function () {
        function WebBluetoothModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        WebBluetoothModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: WebBluetoothModule,
                providers: [
                    BluetoothCore,
                    {
                        provide: BrowserWebBluetooth,
                        useFactory: browserWebBluetooth
                    },
                    {
                        provide: makeMeTokenInjector,
                        useValue: options
                    },
                    {
                        provide: ConsoleLoggerService,
                        useFactory: consoleLoggerServiceConfig,
                        deps: [makeMeTokenInjector]
                    }
                ]
            };
        };
        WebBluetoothModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule]
                    },] }
        ];
        return WebBluetoothModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/lang/uuids/ti-sensortag2.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // http://processors.wiki.ti.com/images/a/a8/BLE_SensorTag_GATT_Server.pdf
    // prettier-ignore
    /** @type {?} */
    var TiTag = {
        DEVICE_INFORMATION: {
            SERVICE: 'f000180a-0451-4000-b000-000000000000',
            SYSTEM_ID: 'f0002a23-0451-4000-b000-000000000000',
            MODEL_NUMBER: 'f0002a24-0451-4000-b000-000000000000',
            SERIAL_NUMBER: 'f0002a25-0451-4000-b000-000000000000',
            FIRMWARE_REV: 'f0002a26-0451-4000-b000-000000000000',
            HARDWARE_REV: 'f0002a27-0451-4000-b000-000000000000',
            SOFTWARE_REV: 'f0002a28-0451-4000-b000-000000000000',
            MANIFACTURER: 'f0002a29-0451-4000-b000-000000000000',
            IEEE11073: 'f0002a2a-0451-4000-b000-000000000000',
            PNP_ID: 'f0002a50-0451-4000-b000-000000000000'
        },
        BATTERY: {
            SERVICE: 'f000180f-0451-4000-b000-000000000000',
            LEVEL: 'f0002a19-0451-4000-b000-000000000000'
        },
        TEMPERATURE: {
            SERVICE: 'f000aa00-0451-4000-b000-000000000000',
            DATA: 'f000aa01-0451-4000-b000-000000000000',
            CONFIGURATION: 'f000aa02-0451-4000-b000-000000000000',
            PERIOD: 'f000aa03-0451-4000-b000-000000000000'
        },
        HUMIDITY: {
            SERVICE: 'f000aa20-0451-4000-b000-000000000000',
            DATA: 'f000aa21-0451-4000-b000-000000000000',
            CONFIGURATION: 'f000aa22-0451-4000-b000-000000000000',
            PERIOD: 'f000aa23-0451-4000-b000-000000000000'
        },
        BAROMETER: {
            SERVICE: 'f000aa40-0451-4000-b000-000000000000',
            DATA: 'f000aa41-0451-4000-b000-000000000000',
            CONFIGURATION: 'f000aa42-0451-4000-b000-000000000000',
            PERIOD: 'f000aa44-0451-4000-b000-000000000000'
        },
        // service not available in model CC2650
        // ACCELEROMETER : {
        //   SERVICE :                 'f000aa10-0451-4000-b000-000000000000',
        //   DATA :                    'f000aa11-0451-4000-b000-000000000000',
        //   CONFIGURATION :           'f000aa12-0451-4000-b000-000000000000',
        //   PERIOD :                  'f000aa13-0451-4000-b000-000000000000'
        // },
        // service not available in model CC2650
        // MAGNETOMETER : {
        //   SERVICE :                 'f000aa30-0451-4000-b000-000000000000',
        //   DATA :                    'f000aa31-0451-4000-b000-000000000000',
        //   CONFIGURATION :           'f000aa32-0451-4000-b000-000000000000',
        //   PERIOD :                  'f000aa33-0451-4000-b000-000000000000'
        // },
        // service not available in model CC2650
        // GYROSCOPE : {
        //   SERVICE :                 'f000aa50-0451-4000-b000-000000000000',
        //   DATA :                    'f000aa51-0451-4000-b000-000000000000',
        //   CONFIGURATION :           'f000aa52-0451-4000-b000-000000000000',
        //   PERIOD :                  'f000aa53-0451-4000-b000-000000000000'
        // },
        MOVEMENT: {
            SERVICE: 'f000aa80-0451-4000-b000-000000000000',
            DATA: 'f000aa81-0451-4000-b000-000000000000',
            CONFIGURATION: 'f000aa82-0451-4000-b000-000000000000',
            PERIOD: 'f000aa83-0451-4000-b000-000000000000'
        },
        LIGHT: {
            SERVICE: 'f000aa70-0451-4000-b000-000000000000',
            DATA: 'f000aa71-0451-4000-b000-000000000000',
            CONFIGURATION: 'f000aa72-0451-4000-b000-000000000000',
            PERIOD: 'f000aa73-0451-4000-b000-000000000000'
        },
        KEYPRESS: {
            SERVICE: 'f000ffe0-0451-4000-b000-000000000000',
            STATE: 'f000ffe1-0451-4000-b000-000000000000'
        },
        __REGISTER__: {
            SERVICE: 'f000ac00-0451-4000-b000-000000000000',
            DATA: 'f000ac01-0451-4000-b000-000000000000',
            ADDRESS: 'f000ac02-0451-4000-b000-000000000000',
            DEVICE_ID: 'f000ac03-0451-4000-b000-000000000000'
        },
        CONTROL: {
            SERVICE: 'f000ccc0-0451-4000-b000-000000000000',
            CURRENT_USED_PARAMETERS: 'f000ccc1-0451-4000-b000-000000000000',
            REQUEST_NEW_PARAMETERS: 'f000ccc2-0451-4000-b000-000000000000',
            DISCONNECT_REQUEST: 'f000ccc3-0451-4000-b000-000000000000'
        },
        OAD: {
            SERVICE: 'f000ffc0-0451-4000-b000-000000000000',
            IMAGE_NOTIFY: 'f000ffc1-0451-4000-b000-000000000000',
            IMAGE_BLOCK_REQUEST: 'f000ffc2-0451-4000-b000-000000000000',
            IMAGE_COUNT: 'f000ffc3-0451-4000-b000-000000000000',
            IMAGE_STATUS: 'f000ffc4-0451-4000-b000-000000000000'
        },
        IO: {
            SERVICE: 'f000aa64-0451-4000-b000-000000000000',
            DATA: 'f000aa65-0451-4000-b000-000000000000',
            CONFIG: 'f000aa66-0451-4000-b000-000000000000'
        }
    };
    var ɵ0 = /**
     * @param {?} key
     * @return {?}
     */
    function (key) { return TiTag[key].SERVICE; };
    /** @type {?} */
    var TI_SENSORAG_SERVICES = Object.keys(TiTag).map((ɵ0));

    exports.BluetoothCore = BluetoothCore;
    exports.BrowserWebBluetooth = BrowserWebBluetooth;
    exports.ConsoleLoggerService = ConsoleLoggerService;
    exports.NoLoggerService = NoLoggerService;
    exports.ServerWebBluetooth = ServerWebBluetooth;
    exports.TI_SENSORAG_SERVICES = TI_SENSORAG_SERVICES;
    exports.TiTag = TiTag;
    exports.WebBluetoothModule = WebBluetoothModule;
    exports.browserWebBluetooth = browserWebBluetooth;
    exports.consoleLoggerServiceConfig = consoleLoggerServiceConfig;
    exports.makeMeTokenInjector = makeMeTokenInjector;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=manekinekko-angular-web-bluetooth.umd.js.map
