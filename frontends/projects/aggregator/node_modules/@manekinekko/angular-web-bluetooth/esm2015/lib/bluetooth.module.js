/**
 * @fileoverview added by tsickle
 * Generated from: lib/bluetooth.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BluetoothCore } from './bluetooth.service';
import { BrowserWebBluetooth } from './platform/browser';
import { ConsoleLoggerService, NoLoggerService } from './logger.service';
/**
 * @record
 */
export function AWBOptions() { }
if (false) {
    /** @type {?|undefined} */
    AWBOptions.prototype.enableTracing;
}
/**
 * @return {?}
 */
export function browserWebBluetooth() {
    return new BrowserWebBluetooth();
}
/**
 * @param {?} options
 * @return {?}
 */
export function consoleLoggerServiceConfig(options) {
    if (options && options.enableTracing) {
        return new ConsoleLoggerService();
    }
    else {
        return new NoLoggerService();
    }
}
/**
 * @return {?}
 */
export function makeMeTokenInjector() {
    return new InjectionToken('AWBOptions');
}
export class WebBluetoothModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options = {}) {
        return {
            ngModule: WebBluetoothModule,
            providers: [
                BluetoothCore,
                {
                    provide: BrowserWebBluetooth,
                    useFactory: browserWebBluetooth
                },
                {
                    provide: makeMeTokenInjector,
                    useValue: options
                },
                {
                    provide: ConsoleLoggerService,
                    useFactory: consoleLoggerServiceConfig,
                    deps: [makeMeTokenInjector]
                }
            ]
        };
    }
}
WebBluetoothModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXRvb3RoLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BtYW5la2luZWtrby9hbmd1bGFyLXdlYi1ibHVldG9vdGgvIiwic291cmNlcyI6WyJsaWIvYmx1ZXRvb3RoLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXpELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUV6RSxnQ0FFQzs7O0lBREMsbUNBQXdCOzs7OztBQUcxQixNQUFNLFVBQVUsbUJBQW1CO0lBQ2pDLE9BQU8sSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0FBQ25DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLE9BQW1CO0lBQzVELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLEVBQUU7UUFDcEMsT0FBTyxJQUFJLG9CQUFvQixFQUFFLENBQUM7S0FDbkM7U0FBTTtRQUNMLE9BQU8sSUFBSSxlQUFlLEVBQUUsQ0FBQztLQUM5QjtBQUNILENBQUM7Ozs7QUFDRCxNQUFNLFVBQVUsbUJBQW1CO0lBQ2pDLE9BQU8sSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUtELE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBc0IsRUFBRTtRQUNyQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1QsYUFBYTtnQkFDYjtvQkFDRSxPQUFPLEVBQUUsbUJBQW1CO29CQUM1QixVQUFVLEVBQUUsbUJBQW1CO2lCQUNoQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsbUJBQW1CO29CQUM1QixRQUFRLEVBQUUsT0FBTztpQkFDbEI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsVUFBVSxFQUFFLDBCQUEwQjtvQkFDdEMsSUFBSSxFQUFFLENBQUMsbUJBQW1CLENBQUM7aUJBQzVCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBeEJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBCbHVldG9vdGhDb3JlIH0gZnJvbSAnLi9ibHVldG9vdGguc2VydmljZSc7XG5pbXBvcnQgeyBCcm93c2VyV2ViQmx1ZXRvb3RoIH0gZnJvbSAnLi9wbGF0Zm9ybS9icm93c2VyJztcblxuaW1wb3J0IHsgQ29uc29sZUxvZ2dlclNlcnZpY2UsIE5vTG9nZ2VyU2VydmljZSB9IGZyb20gJy4vbG9nZ2VyLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFXQk9wdGlvbnMge1xuICBlbmFibGVUcmFjaW5nPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyb3dzZXJXZWJCbHVldG9vdGgoKSB7XG4gIHJldHVybiBuZXcgQnJvd3NlcldlYkJsdWV0b290aCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZUxvZ2dlclNlcnZpY2VDb25maWcob3B0aW9uczogQVdCT3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVuYWJsZVRyYWNpbmcpIHtcbiAgICByZXR1cm4gbmV3IENvbnNvbGVMb2dnZXJTZXJ2aWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBOb0xvZ2dlclNlcnZpY2UoKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VNZVRva2VuSW5qZWN0b3IoKSB7XG4gIHJldHVybiBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FXQk9wdGlvbnMnKTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgV2ViQmx1ZXRvb3RoTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qob3B0aW9uczogQVdCT3B0aW9ucyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBXZWJCbHVldG9vdGhNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQmx1ZXRvb3RoQ29yZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJyb3dzZXJXZWJCbHVldG9vdGgsXG4gICAgICAgICAgdXNlRmFjdG9yeTogYnJvd3NlcldlYkJsdWV0b290aFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogbWFrZU1lVG9rZW5JbmplY3RvcixcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQ29uc29sZUxvZ2dlclNlcnZpY2UsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY29uc29sZUxvZ2dlclNlcnZpY2VDb25maWcsXG4gICAgICAgICAgZGVwczogW21ha2VNZVRva2VuSW5qZWN0b3JdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=