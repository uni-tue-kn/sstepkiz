/**
 * @fileoverview added by tsickle
 * Generated from: lib/bluetooth.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter } from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
import { from, fromEvent, throwError } from 'rxjs';
import { filter, map, mergeMap, takeUntil } from 'rxjs/operators';
import { ConsoleLoggerService } from './logger.service';
import { BrowserWebBluetooth } from './platform/browser';
import * as i0 from "@angular/core";
import * as i1 from "./platform/browser";
import * as i2 from "./logger.service";
export class BluetoothCore {
    /**
     * @param {?} webBle
     * @param {?} console
     */
    constructor(webBle, console) {
        this.webBle = webBle;
        this.console = console;
        this.device$ = new EventEmitter();
        this.gatt$ = new EventEmitter();
        this.characteristicValueChanges$ = new EventEmitter();
        this.gattServer = null;
    }
    /**
     * @return {?}
     */
    getDevice$() {
        return this.device$;
    }
    /**
     * @return {?}
     */
    getGATT$() {
        return this.gatt$;
    }
    /**
     * @return {?}
     */
    streamValues$() {
        return this.characteristicValueChanges$.pipe(filter((/**
         * @param {?} value
         * @return {?}
         */
        value => value && value.byteLength > 0)));
    }
    /**
     * Run the discovery process and read the value form the provided service and characteristic
     * @param {?} options the ReadValueOptions
     * @return {?}
     */
    value(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.console.log('[BLE::Info] Reading value with options %o', options);
            if (typeof options.acceptAllDevices === 'undefined') {
                options.acceptAllDevices = true;
            }
            if (typeof options.optionalServices === 'undefined') {
                options.optionalServices = [options.service];
            }
            else {
                options.optionalServices = [...options.optionalServices];
            }
            this.console.log('[BLE::Info] Reading value with options %o', options);
            try {
                /** @type {?} */
                const device = (/** @type {?} */ (yield this.discover({
                    acceptAllDevices: options.acceptAllDevices,
                    optionalServices: options.optionalServices
                })));
                this.console.log('[BLE::Info] Device info %o', device);
                /** @type {?} */
                const gatt = yield this.connectDevice(device);
                this.console.log('[BLE::Info] GATT info %o', gatt);
                /** @type {?} */
                const primaryService = (/** @type {?} */ (yield this.getPrimaryService(gatt, options.service)));
                this.console.log('[BLE::Info] Primary Service info %o', primaryService);
                /** @type {?} */
                const characteristic = (/** @type {?} */ (yield this.getCharacteristic(primaryService, options.characteristic)));
                this.console.log('[BLE::Info] Characteristic info %o', characteristic);
                /** @type {?} */
                const value = yield characteristic.readValue();
                this.console.log('[BLE::Info] Value info %o', value);
                return value;
            }
            catch (error) {
                throw new Error(error);
            }
        });
    }
    /**
     * @param {?} options
     * @return {?}
     */
    value$(options) {
        return from(this.value(options));
    }
    /**
     * Run the discovery process.
     *
     * @param {?=} options
     * @return {?} The GATT server for the chosen device
     */
    discover(options = (/** @type {?} */ ({}))) {
        return __awaiter(this, void 0, void 0, function* () {
            options.optionalServices = options.optionalServices || ['generic_access'];
            this.console.log('[BLE::Info] Requesting devices with options %o', options);
            /** @type {?} */
            let device = null;
            try {
                device = yield this.webBle.requestDevice(options);
                device.addEventListener('gattserverdisconnected', this.onDeviceDisconnected.bind(this));
                if (device) {
                    this.device$.emit(device);
                }
                else {
                    this.device$.error(`[BLE::Error] Can not get the Bluetooth Remote GATT Server. Abort.`);
                }
            }
            catch (error) {
                this.console.error(error);
            }
            return device;
        });
    }
    /**
     * This handler will trigger when the client disconnets from the server.
     *
     * @param {?} event The onDeviceDisconnected event
     * @return {?}
     */
    onDeviceDisconnected(event) {
        /** @type {?} */
        const disconnectedDevice = (/** @type {?} */ (event.target));
        this.console.log('[BLE::Info] disconnected device %o', disconnectedDevice);
        this.device$.emit(null);
    }
    /**
     * Run the discovery process.
     *
     * @param {?=} options
     * @return {?} Emites the value of the requested service read from the device
     */
    discover$(options) {
        return from(this.discover(options)).pipe(mergeMap((/**
         * @param {?} device
         * @return {?}
         */
        (device) => this.connectDevice$(device))));
    }
    /**
     * Connect to current device.
     *
     * @param {?} device
     * @return {?} Emites the gatt server instance of the requested device
     */
    connectDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            if (device) {
                this.console.log('[BLE::Info] Connecting to Bluetooth Remote GATT Server of %o', device);
                try {
                    /** @type {?} */
                    const gattServer = yield device.gatt.connect();
                    this.gattServer = gattServer;
                    this.gatt$.emit(gattServer);
                    return gattServer;
                }
                catch (error) {
                    // probably the user has canceled the discovery
                    Promise.reject(`${error.message}`);
                    this.gatt$.error(`${error.message}`);
                }
            }
            else {
                this.console.error('[BLE::Error] Was not able to connect to Bluetooth Remote GATT Server');
                this.gatt$.error(null);
            }
        });
    }
    /**
     * Connect to current device.
     *
     * @param {?} device
     * @return {?} Emites the gatt server instance of the requested device
     */
    connectDevice$(device) {
        return from(this.connectDevice(device));
    }
    /**
     * Disconnect the current connected device
     * @return {?}
     */
    disconnectDevice() {
        if (!this.gattServer) {
            return;
        }
        this.console.log('[BLE::Info] Disconnecting from Bluetooth Device %o', this.gattServer);
        if (this.gattServer.connected) {
            this.gattServer.disconnect();
        }
        else {
            this.console.log('[BLE::Info] Bluetooth device is already disconnected');
        }
    }
    /**
     * Requests the primary service.
     *
     * @param {?} gatt The BluetoothRemoteGATTServer sever
     * @param {?} service The UUID of the primary service
     * @return {?} The remote service (as a Promise)
     */
    getPrimaryService(gatt, service) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                const remoteService = yield gatt.getPrimaryService(service);
                return yield Promise.resolve(remoteService);
            }
            catch (error) {
                return yield Promise.reject(`${error.message} (${service})`);
            }
        });
    }
    /**
     * Requests the primary service.
     *
     * @param {?} gatt The BluetoothRemoteGATTServer sever
     * @param {?} service The UUID of the primary service
     * @return {?} The remote service (as an observable).
     */
    getPrimaryService$(gatt, service) {
        this.console.log('[BLE::Info] Getting primary service "%s" (if available) of %o', service, gatt);
        if (gatt) {
            return from(this.getPrimaryService(gatt, service));
        }
        else {
            return throwError(new Error('[BLE::Error] Was not able to connect to the Bluetooth Remote GATT Server'));
        }
    }
    /**
     * Requests a characteristic from the primary service.
     *
     * @param {?} primaryService The primary service.
     * @param {?} characteristic The characteristic's UUID.
     * @return {?} The characteristic description (as a Promise).
     */
    getCharacteristic(primaryService, characteristic) {
        return __awaiter(this, void 0, void 0, function* () {
            this.console.log('[BLE::Info] Getting Characteristic "%s" of %o', characteristic, primaryService);
            try {
                /** @type {?} */
                const char = yield primaryService.getCharacteristic(characteristic);
                // listen for characteristic value changes
                if (char.properties.notify) {
                    char.startNotifications().then((/**
                     * @param {?} _
                     * @return {?}
                     */
                    _ => {
                        this.console.log('[BLE::Info] Starting notifications of "%s"', characteristic);
                        char.addEventListener('characteristicvaluechanged', this.onCharacteristicChanged.bind(this));
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    (error) => {
                        Promise.reject(`${error.message} (${characteristic})`);
                    }));
                }
                else {
                    char.addEventListener('characteristicvaluechanged', this.onCharacteristicChanged.bind(this));
                }
                return char;
            }
            catch (rejectionError) {
                Promise.reject(`${rejectionError.message} (${characteristic})`);
            }
        });
    }
    /**
     * Requests a characteristic from the primary service.
     *
     * @param {?} primaryService The primary service.
     * @param {?} characteristic The characteristic's UUID.
     * @return {?} The characteristic description (as a Observable).
     */
    getCharacteristic$(primaryService, characteristic) {
        this.console.log('[BLE::Info] Getting Characteristic "%s" of %o', characteristic, primaryService);
        return from(this.getCharacteristic(primaryService, characteristic));
    }
    /**
     * Sets the characteristic's state.
     *
     * @param {?} service The parent service of the characteristic.
     * @param {?} characteristic The requested characteristic
     * @param {?} state An ArrayBuffer containing the value of the characteristic.
     * @return {?} The primary service (useful for chaining).
     */
    setCharacteristicState(service, characteristic, state) {
        /** @type {?} */
        const primaryService = this.getPrimaryService$(this.gattServer, service);
        primaryService
            // tslint:disable-next-line: variable-name
            .pipe(mergeMap((/**
         * @param {?} _primaryService
         * @return {?}
         */
        (_primaryService) => this.getCharacteristic$(_primaryService, characteristic))))
            // tslint:disable-next-line: no-shadowed-variable
            .subscribe((/**
         * @param {?} characteristic
         * @return {?}
         */
        (characteristic) => this.writeValue$(characteristic, state)));
        return primaryService;
    }
    /**
     * Enables the specified characteristic of a given service.
     *
     * @param {?} service The parent service of the characteristic.
     * @param {?} characteristic The requested characteristic
     * @param {?=} state
     * @return {?} The primary service (useful for chaining).
     */
    enableCharacteristic(service, characteristic, state) {
        state = state || new Uint8Array([1]);
        return this.setCharacteristicState(service, characteristic, state);
    }
    /**
     * Disables the specified characteristic of a given service.
     *
     * @param {?} service The parent service of the characteristic.
     * @param {?} characteristic The requested characteristic.
     * @param {?=} state
     * @return {?} The primary service (useful for chaining).
     */
    disbaleCharacteristic(service, characteristic, state) {
        state = state || new Uint8Array([0]);
        return this.setCharacteristicState(service, characteristic, state);
    }
    /**
     * Dispatches new values emitted by a characteristic.
     *
     * @param {?} event the distpatched event.
     * @return {?}
     */
    onCharacteristicChanged(event) {
        this.console.log('[BLE::Info] Dispatching new characteristic value %o', event);
        /** @type {?} */
        const value = ((/** @type {?} */ (event.target))).value;
        this.characteristicValueChanges$.emit(value);
    }
    /**
     * Reads a value from the characteristics, as a DataView.
     *
     * @param {?} characteristic The requested characteristic.
     * @return {?} the DataView value (as an Observable).
     */
    readValue$(characteristic) {
        this.console.log('[BLE::Info] Reading Characteristic %o', characteristic);
        return from(characteristic
            .readValue()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => Promise.resolve(data)), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => Promise.reject(`${error.message}`))));
    }
    /**
     * Writes a value into the specified characteristic.
     *
     * @param {?} characteristic The requested characteristic.
     * @param {?} value The value to be written (as an ArrayBuffer or Uint8Array).
     * @return {?} an void Observable.
     */
    writeValue$(characteristic, value) {
        this.console.log('[BLE::Info] Writing Characteristic %o', characteristic);
        return from(characteristic.writeValue(value).then((/**
         * @param {?} _
         * @return {?}
         */
        _ => Promise.resolve()), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => Promise.reject(`${error.message}`))));
    }
    /**
     * A stream of DataView values emitted by the specified characteristic.
     *
     * @param {?} characteristic The characteristic which value you want to observe
     * @return {?} The stream of DataView values.
     */
    observeValue$(characteristic) {
        characteristic.startNotifications();
        /** @type {?} */
        const disconnected = fromEvent(characteristic.service.device, 'gattserverdisconnected');
        return fromEvent(characteristic, 'characteristicvaluechanged')
            .pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        (event) => (/** @type {?} */ (((/** @type {?} */ (event.target))).value)))), takeUntil(disconnected));
    }
    /**
     * A utility method to convert LE to an unsigned 16-bit integer values.
     *
     * @param {?} data The DataView binary data.
     * @param {?} byteOffset The offset, in byte, from the start of the view where to read the data.
     * @return {?} An unsigned 16-bit integer number.
     */
    littleEndianToUint16(data, byteOffset) {
        // tslint:disable-next-line:no-bitwise
        return (this.littleEndianToUint8(data, byteOffset + 1) << 8) + this.littleEndianToUint8(data, byteOffset);
    }
    /**
     * A utility method to convert LE to an unsigned 8-bit integer values.
     *
     * @param {?} data The DataView binary data.
     * @param {?} byteOffset The offset, in byte, from the start of the view where to read the data.
     * @return {?} An unsigned 8-bit integer number.
     */
    littleEndianToUint8(data, byteOffset) {
        return data.getUint8(byteOffset);
    }
    /**
     * Sends random data (for testing purposes only).
     *
     * @param {?=} fakeValue
     * @return {?} Random unsigned 8-bit integer values.
     */
    fakeNext(fakeValue) {
        if (fakeValue === undefined) {
            fakeValue = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const dv = new DataView(new ArrayBuffer(8));
                // tslint:disable-next-line:no-bitwise
                dv.setUint8(0, (Math.random() * 110) | 0);
                return dv;
            });
        }
        this.characteristicValueChanges$.emit(fakeValue());
    }
}
BluetoothCore.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
BluetoothCore.ctorParameters = () => [
    { type: BrowserWebBluetooth },
    { type: ConsoleLoggerService }
];
/** @nocollapse */ BluetoothCore.ɵprov = i0.ɵɵdefineInjectable({ factory: function BluetoothCore_Factory() { return new BluetoothCore(i0.ɵɵinject(i1.BrowserWebBluetooth), i0.ɵɵinject(i2.ConsoleLoggerService)); }, token: BluetoothCore, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    BluetoothCore.prototype.device$;
    /**
     * @type {?}
     * @private
     */
    BluetoothCore.prototype.gatt$;
    /**
     * @type {?}
     * @private
     */
    BluetoothCore.prototype.characteristicValueChanges$;
    /**
     * @type {?}
     * @private
     */
    BluetoothCore.prototype.gattServer;
    /**
     * @type {?}
     * @private
     */
    BluetoothCore.prototype.webBle;
    /**
     * @type {?}
     * @private
     */
    BluetoothCore.prototype.console;
}
//# sourceMappingURL=data:application/json;base64,